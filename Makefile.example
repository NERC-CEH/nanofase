# Example Makefile for NanoFASE model. Usage:
# 	`make`          Compile the Fortran source code to an executable
# 	`make run`      Run this executable
# 	`make profile`  Run with the profiler gprof
# 	`make debug`    Run in debug mode with gdb. Make sure -g flag is present in DEBUGFLAGS
#	`make clean`    Clean compilation files

FC = gfortran                                                           # What compiler to use? gfortran recommended
WARNINGS = -Wall                                                        # Compiler warnings
FCFLAGS = -O1 -fcheck=all -fbackslash -fopenmp ${WARNINGS}              # Compiler flags. Caution using -O0 due to this issue: https://stackoverflow.com/questions/44385909/adding-to-an-array-of-characters-in-fortran
DEBUGFLAGS = -g -ffpe-trap=zero,invalid,overflow,underflow -pg          # Debug flags
EXEC_FILE = main                                                        # Name of the executable file to create
EXEC_PATH = ./bin/                                                      # Path to the executable file
NETCDF = `nf-config --fflags --flibs`                                   # NetCDF config
CONFIG_PATH = ./config/                                                 # When using `make run`, this gives the path to the config file
CONFIG_FILE = thames.nml                                                # When using `make run`, this gives the name of the config file
GIT_HASH = `git rev-parse HEAD`                                         # The following variables generate a unique compilation metadata file
COMPILE_TIME = `date -u +'%Y-%m-%d %H:%M:%S UTC'`                       # to be placed in EXEC_PATH, which includes the current Git commit,
GIT_BRANCH = `git rev-parse --abbrev-ref HEAD`                          # branch and compilation time
COMP_META = $(COMPILE_TIME) $(GIT_HASH) $(GIT_BRANCH)

OBJ = vendor/feh/src/ErrorInstance.o \
	vendor/feh/src/Result.o \
	vendor/feh/src/ErrorHandler.o \
	vendor/feh/src/ErrorCriteria.o \
	vendor/mo_netcdf/src/mo_types.o \
	vendor/mo_netcdf/src/mo_netcdf.o \
	vendor/datetime-fortran/mod_timedelta.o \
	vendor/datetime-fortran/mod_strftime.o \
	vendor/datetime-fortran/mod_constants.o \
	vendor/datetime-fortran/mod_datetime.o \
	vendor/datetime-fortran/mod_clock.o \
	vendor/datetime-fortran/datetime.o \
	src/mod_strptime.o \
	src/Globals.o \
	src/UtilModule.o \
	src/Logger/classLogger.o \
	src/classDatabase.o \
	src/Biota/spcBiota.o \
	src/Biota/classBiotaSoil.o \
	src/Biota/classBiotaWater.o \
	src/Reactor/spcReactor.o \
	src/Reactor/classReactor1.o \
	src/BedSedimentLayer/classFineSediment1.o \
	src/BedSedimentLayer/spcBedSedimentLayer.o \
	src/BedSedimentLayer/classBedSedimentLayer1.o \
	src/BedSediment/spcBedSediment.o \
	src/BedSediment/classBedSediment1.o \
	src/Source/classDiffuseSource2.o \
	src/Source/classPointSource2.o \
	src/WaterBody/spcWaterBody.o \
	src/WaterBody/spcReach.o \
	src/classRiverReach.o \
	src/classEstuaryReach.o \
	src/classSampleSite.o \
	src/Soil/spcSoilLayer.o \
	src/Soil/classSoilLayer1.o \
	src/Soil/spcSoilProfile.o \
	src/Soil/classSoilProfile1.o \
	src/GridCell/classCrop.o \
	src/GridCell/spcGridCell.o \
	src/GridCell/classGridCell2.o \
	src/Environment/spcEnvironment.o \
	src/Environment/classEnvironment1.o \
	src/Data/DataOutputModule.o \
	src/main.o 

OBJECTS = $(notdir $(OBJ))

VPATH = vendor/feh/src \
	vendor/mo_netcdf/src \
	vendor/datetime-fortran/src/lib \
	src \
	src/Data \
	src/Logger \
	src/Biota \
	src/Reactor \
	src/BedSedimentLayer \
	src/BedSediment \
	src/Source \
	src/WaterBody \
	src/Soil \
	src/GridCell \
	src/Environment

$(EXEC_FILE): $(OBJECTS)
	$(FC) $(FCFLAGS) $(DEBUGFLAGS) -o $(EXEC_PATH)$@ $^ $(NETCDF)
	echo $(COMP_META) > $(EXEC_PATH)comp_meta
%.o: %.f90
	$(FC) -c $(FCFLAGS) $(DEBUGFLAGS) $< $(NETCDF)
run:
	$(EXEC_PATH)$(EXEC_FILE) $(CONFIG_PATH)$(CONFIG_FILE)
profile:
	gprof $(EXEC_PATH)$(EXEC_FILE) gmon.out
debug:
	gdb --args $(EXEC_PATH)$(EXEC_FILE) $(CONFIG_PATH)$(CONFIG_FILE)
clean:
	rm -f *.mod *.o *.stackdump Debug/*.* *.out

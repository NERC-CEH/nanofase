
# Example Makefile for NanoFASE model. Usage:
# 	`make`          Compile the Fortran source code with maximum debugging and minimal optimisations
#	`make release`	Compile the Fortran source code with maximum optimisations and minimal debugging
# 	`make run`      Run this executable
# 	`make profile`  Run with the profiler gprof
# 	`make debug`    Run in debug mode with gdb. Make sure -g flag is present in DEBUGFLAGS
#	`make clean`    Clean compilation files

# What compiler to use? gfortran recommended
FC = gfortran
# Flags for debug (main) build. Caution using -O0 due to this issue: https://stackoverflow.com/questions/44385909/adding-to-an-array-of-characters-in-fortran
DEBUG_FLAGS = -Og -pg -g -Wall
# Flags for release build
RELEASE_FLAGS = -O3 -pg -g
# Fast flags - use with caution. The -march flag might result in the compiled model only working on your computer
FAST_FLAGS = -Ofast -march=native -mtune=native
# Flags common to both builds
COMMON_FLAGS = -ffpe-trap=zero,invalid,overflow,underflow -fcheck=all -fbackslash
# Default to debug flags
FLAGS = ${DEBUG_FLAGS} ${COMMON_FLAGS}
# Executable file name and path
EXEC_FILE = main
EXEC_PATH = ./bin/
# NetCDF config, assuming you have the nf-config utility installed
NETCDF = `nf-config --fflags --flibs`
# Config file name and path. Used when running `make run`.
CONFIG_PATH = ./config.example/
CONFIG_FILE = config.example.nml
# The following variables generate a unique compilation metadata file to be placed in EXEC_PATH,
# which includes the current Git commit, branch and compilation time
GIT_HASH = `git rev-parse HEAD`
COMPILE_TIME = `date -u +'%Y-%m-%d %H:%M:%S UTC'`
GIT_RELEASE = `git describe --tags`
COMP_META = $(COMPILE_TIME) $(GIT_HASH) $(GIT_RELEASE)

# Should we be compiling with auto parallelisation? Depending on your setup, this might actually slow things down
AUTOPARALLEL = 0
N_THREADS = 4
ifeq ($(AUTOPARALLEL), 1)
	COMMON_FLAGS += -floop-parallelize-all -ftree-parallelize-loops=${N_THREADS}
endif

OBJ = vendor/feh/src/ErrorInstance.o \
	vendor/feh/src/Result.o \
	vendor/feh/src/ErrorHandler.o \
	vendor/feh/src/ErrorCriteria.o \
	vendor/mo_netcdf/src/mo_types.o \
	vendor/mo_netcdf/src/mo_netcdf.o \
	vendor/datetime-fortran/mod_timedelta.o \
	vendor/datetime-fortran/mod_strftime.o \
	vendor/datetime-fortran/mod_constants.o \
	vendor/datetime-fortran/mod_datetime.o \
	vendor/datetime-fortran/mod_clock.o \
	vendor/datetime-fortran/datetime.o \
	vendor/spoof/sparskit.o \
	vendor/spoof/Spoof.o \
	src/mod_strptime.o \
	src/VersionModule.o \
	src/DefaultsModule.o \
	src/Globals.o \
	src/UtilModule.o \
	src/Logger/LoggerModule.o \
	src/Data/DataInputModule.o \
	src/Biota/AbstractBiotaModule.o \
	src/Biota/BiotaSoilModule.o \
	src/Biota/BiotaWaterModule.o \
	src/Reactor/AbstractReactorModule.o \
	src/Reactor/ReactorModule.o \
	src/BedSedimentLayer/FineSedimentModule.o \
	src/BedSedimentLayer/AbstractBedSedimentLayerModule.o \
	src/BedSedimentLayer/BedSedimentLayerModule.o \
	src/BedSediment/AbstractBedSedimentModule.o \
	src/BedSediment/BedSedimentModule.o \
	src/Source/DiffuseSourceModule.o \
	src/Source/PointSourceModule.o \
	src/WaterBody/FlowModule.o \
	src/WaterBody/WaterBodyModule.o \
	src/WaterBody/ReachModule.o \
	src/RiverReachModule.o \
	src/EstuaryReachModule.o \
	src/Soil/AbstractSoilLayerModule.o \
	src/Soil/SoilLayerModule.o \
	src/Soil/AbstractSoilProfileModule.o \
	src/Soil/SoilProfileModule.o \
	src/GridCell/CropModule.o \
	src/GridCell/AbstractGridCellModule.o \
	src/GridCell/GridCellModule.o \
	src/Environment/AbstractEnvironmentModule.o \
	src/Environment/EnvironmentModule.o \
	src/Data/NetCDFOutputModule.o \
	src/Data/NetCDFAggregatedOutputModule.o \
	src/Data/DataOutputModule.o \
	src/CheckpointModule.o \
	src/main.o 

OBJECTS = $(notdir $(OBJ))

VPATH = vendor/feh/src \
	vendor/mo_netcdf/src \
	vendor/datetime-fortran/src/lib \
	vendor/spoof \
	src \
	src/Data \
	src/Logger \
	src/Biota \
	src/Reactor \
	src/BedSedimentLayer \
	src/BedSediment \
	src/Source \
	src/WaterBody \
	src/Soil \
	src/GridCell \
	src/Environment

$(EXEC_FILE): $(OBJECTS)
	sed -i "s/\".*\"/\"${GIT_RELEASE}\"/g" src/VersionModule.f90
	$(FC) $(FLAGS) -o $(EXEC_PATH)$@ $^ $(NETCDF)
	echo $(COMP_META) > $(EXEC_PATH)comp_meta
%.o: %.f90
	$(FC) -c $(FLAGS) $< $(NETCDF)
release: FLAGS = ${RELEASE_FLAGS} ${COMMON_FLAGS}
release: $(EXEC_FILE)
fast: FLAGS = ${FAST_FLAGS} ${COMMON_FLAGS}
fast: $(EXEC_FILE)
run:
	$(EXEC_PATH)$(EXEC_FILE) $(CONFIG_PATH)$(CONFIG_FILE)
profile:
	gprof $(EXEC_PATH)$(EXEC_FILE) gmon.out
debug:
	gdb --args $(EXEC_PATH)$(EXEC_FILE) $(CONFIG_PATH)$(CONFIG_FILE)
clean:
	rm -f *.mod *.o *.stackdump Debug/*.* *.out


